const fs = require("fs");
const path = require("path");

const mapFile = path.join(__dirname, "tipograf.txt");
const targetFile = process.argv[2];

if (!targetFile) {
  console.error("‚ùå –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: node replaceMap.js –ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É.jsx");
  process.exit(1);
}

if (!fs.existsSync(mapFile)) {
  console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–∞—Ä—Ç—ã: ${mapFile}`);
  process.exit(1);
}

console.log(`üì¶ –§–∞–π–ª –∑–∞–º–µ–Ω: ${mapFile}`);
console.log(`üéØ –§–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${targetFile}`);

const replacements = [];
const lines = fs.readFileSync(mapFile, "utf8").split("\n");

console.log("\nüîç –ü–∞—Ä—Å–∏–Ω–≥ tipograf.txt:");
lines.forEach((rawLine, i) => {
  console.log(`  [${i + 1}] RAW:`, JSON.stringify(rawLine));

  const line = rawLine.replace(/[\r\uFEFF]/g, "").trim();
  if (!line || line.startsWith("#")) return;

  const arrowIndex = line.indexOf("=>") >= 0 ? line.indexOf("=>") : line.indexOf("‚Üí");
  if (arrowIndex === -1) {
    console.warn(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i + 1} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è:`, JSON.stringify(rawLine));
    return;
  }

  const fromRaw = line.slice(0, arrowIndex).trim();
  const to = line.slice(arrowIndex + 2).trim();

  if (!fromRaw || !to) {
    console.warn(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i + 1} –Ω–µ–ø–æ–ª–Ω–∞—è:`, JSON.stringify(rawLine));
    return;
  }

  // –†–µ–≥—É–ª—è—Ä–∫–∞ ‚Äî –ø–æ–º–µ—á–µ–Ω–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º r:
  if (fromRaw.startsWith("r:")) {
    const pattern = fromRaw.slice(2).trim();
    try {
      const regex = new RegExp(pattern, "g");
      replacements.push({ type: "regex", regex, to });
      console.log(`  üîÅ [regex] /${pattern}/ => '${to}'`);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Ä–µ–≥–µ–∫—Å–ø–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}:`, err.message);
    }
  } else {
    const escaped = fromRaw.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    replacements.push({ type: "plain", regex: new RegExp(escaped, "g"), to });
    console.log(`  ‚úÖ [plain] '${fromRaw}' => '${to}'`);
  }
});

let content = fs.readFileSync(targetFile, "utf8");

console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${targetFile}`);
replacements.forEach(({ regex, to }, i) => {
  const matches = content.match(regex);
  console.log(`‚û° –ó–∞–º–µ–Ω–∞ #${i + 1}: ${regex} ‚Üí '${to}' ‚Äî –Ω–∞–π–¥–µ–Ω–æ: ${matches?.length || 0}`);
  content = content.replace(regex, to);
});

fs.writeFileSync(targetFile, content);
console.log(`\n‚úî –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω: ${targetFile}`);
