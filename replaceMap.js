const fs = require("fs");
const path = require("path");

// ‚ñ∫ tipograf.txt –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
const mapFile = path.join(__dirname, "tipograf.txt");
const targetFile = process.argv[2];

if (!targetFile) {
  console.error("‚ùå –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: node replaceMap.js –ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É.jsx");
  process.exit(1);
}

if (!fs.existsSync(mapFile)) {
  console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–∞—Ä—Ç—ã: ${mapFile}`);
  process.exit(1);
}

console.log(`üì¶ –§–∞–π–ª –∑–∞–º–µ–Ω: ${mapFile}`);
console.log(`üéØ –§–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${targetFile}`);

const replacements = {};
const lines = fs.readFileSync(mapFile, "utf8").split("\n");

console.log("\nüîç –ü–∞—Ä—Å–∏–Ω–≥ tipograf.txt:");
lines.forEach((rawLine, i) => {
  console.log(`  [${i + 1}] RAW:`, JSON.stringify(rawLine));

  const line = rawLine.replace(/[\r\uFEFF]/g, "");
  const arrowIndex = line.indexOf("=>") >= 0 ? line.indexOf("=>") : line.indexOf("‚Üí");

  if (arrowIndex === -1) {
    if (line.trim()) {
      console.warn(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i + 1} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è:`, JSON.stringify(rawLine));
    }
    return;
  }

  const from = line.slice(0, arrowIndex).replace(/\s+$/, " ");
  const to = line.slice(arrowIndex + 2).trim();

  if (from && to) {
    replacements[from] = to;
    console.log(`  ‚úÖ '${from}' => '${to}'`);
  } else {
    console.warn(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i + 1} –Ω–µ–ø–æ–ª–Ω–∞—è:`, JSON.stringify(rawLine));
  }
});

let content = fs.readFileSync(targetFile, "utf8");

console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${targetFile}`);
for (const [from, to] of Object.entries(replacements)) {
  const regex = new RegExp(from.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "g");
  const matches = content.match(regex);
  console.log(`‚û° '${from}' ‚Üí '${to}' ‚Äî –Ω–∞–π–¥–µ–Ω–æ:`, matches?.length || 0);
  content = content.replace(regex, to);
}

fs.writeFileSync(targetFile, content);
console.log(`\n‚úî –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω: ${targetFile}`);
